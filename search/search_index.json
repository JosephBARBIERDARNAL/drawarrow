{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>drawarrow</code>","text":"<p><code>drawarrow</code> is a Python package that simplifies (a lot) the process of creating and customising arrows in Matplotlib.</p> <p>It provides everything you need to create any arrow you can imagine:</p> <ul> <li>double-headed</li> <li>curved</li> <li>wide or thin</li> <li>with an inflection point</li> <li>with a shadow</li> <li>And so on...</li> </ul> <p>View examples</p> <p></p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter(x=[1, 2, 3, 4, 5], y=[1, 2, 3, 4, 5], s=100)\n\nfig_arrow(\n    head_position=(0.5, 0.5),\n    tail_position=(0.2, 0.7),\n    width=2,\n    radius=0.3,\n    color=\"darkred\",\n    fill_head=False,\n    mutation_scale=2,\n)\n\nplt.show()\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install drawarrow\n</code></pre>"},{"location":"#next-steps","title":"Next steps","text":"<p>You can have a look at this tutorial or see the examples.</p> <p></p>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#why-a-package-just-to-make-arrows","title":"Why a package just to make arrows?","text":"<p>Matplotlib has many built-in features for creating arrows. But there are too many: did you know that there are 5 different ways of making an arrow in Matplotlib!</p> <ul> <li><code>ax.arrow()</code></li> <li><code>ax.annotate()</code></li> <li><code>patches.Arrow()</code></li> <li><code>patches.FancyArrow()</code></li> <li><code>patches.FancyArrowPatch()</code></li> </ul> <p>All these functions behave differently and have their own features.</p> <p>The problem is that you have to change functions when you want to style your arrow differently, which makes customising an arrow quite difficult.</p> <p>Also, to create an arrow with an inflection point in matplotlib, you have to specify the angles of the inflection, which makes it almost impossible to guess where the inflection point will be.</p> <p><code>drawarrow</code> is simply a wrapper around these functions. It makes more sense (at least to me) to have 1 (actually 2, but with a lot in common) function with clear and explicit arguments that behaves simply.</p> <ul> <li>Want to bend your arrow? Just use the <code>radius</code> argument?</li> <li>Want an empty arrowhead? Use <code>fill_head=False</code>.</li> <li>Want an arrow with 2 heads? Set <code>double_headed=True</code>.</li> <li>And so on...</li> </ul> <p>With <code>drawarrow</code>, you can create virtually any arrow you want with a single function.</p> <p></p>"},{"location":"FAQ/#whats-the-difference-between-ax_arrow-and-fig_arrow","title":"What's the difference between <code>ax_arrow</code> and <code>fig_arrow</code>?","text":"<p><code>ax_arrow</code> and <code>fig_arrow</code> are 99% identical: the only difference lies in the coordinate systems they use.</p> <ul> <li>With <code>fig_arrow</code>, the position of the arrow is relative to the Figure (from 0 to 1).</li> <li>With <code>ax_arrow</code>, the position of the arrow is relative to your data (if your x-axis goes from 1 to 50 and you want an arrow in the middle, place it around 25 on the x-axis).</li> </ul> <p>The reason <code>drawarrow</code> does this is to follow a pattern in matplotlib. For example, matplotlib does the same thing with <code>fig.text()</code> and <code>ax.text()</code>. The highlight_text package does the same.</p> <p>It is more flexible if you want an arrow in a specific place, or if you want to add it automatically (e.g. in a for loop) without too much trial and error.</p> <p></p>"},{"location":"FAQ/#are-there-many-dependencies","title":"Are there many dependencies?","text":"<p><code>drawarrow</code> only relies on Matplotlib.</p> <p></p>"},{"location":"FAQ/#other","title":"Other","text":"<p>Having another question? Feel free to open an issue.</p> <p></p>"},{"location":"reference/arrow_spines/","title":"arrow_spines","text":""},{"location":"reference/arrow_spines/#drawarrow.arrow_spines.arrow_spines","title":"<code>drawarrow.arrow_spines.arrow_spines(bottom='toright', left='totop', right=None, top=None, ax=None, **arrow_style)</code>","text":"<p>Replace matplotlib spines with arrows instead. By default it adds an arrow at the bottom spine (to the right) and an arrow at the left spine (to the top), but it can customized. See examples below.</p> <p>Parameters:</p> <ul> <li><code>bottom</code>: direction of the arrow (either 'toright' or 'toleft'). No arrow if <code>None</code></li> <li><code>top</code>: direction of the arrow (either 'toright' or 'toleft'). No arrow if <code>None</code> (default)</li> <li><code>left</code>: direction of the arrow (either 'totop' or 'tobottom'). No arrow if <code>None</code></li> <li><code>right</code>: direction of the arrow (either 'totop' or 'tobottom'). No arrow if <code>None</code> (default)</li> <li><code>ax</code>: The matplotlib axes to draw the arrow on. If None, uses the current axes</li> <li><code>arrow_style</code>: any additional arguments passed to <code>ax_arrow()</code></li> </ul> <p>Returns:</p> <ul> <li><code>Axes</code>: the matplotlib axes</li> </ul> <p>Usage</p> <pre><code>import matplotlib.pyplot as plt\nfrom drawarrow import arrow_spines\n\nfig, ax = plt.subplots()\narrow_spines(ax=ax, color=\"red\")\nplt.show()\n</code></pre>"},{"location":"reference/arrow_spines/#examples","title":"Examples","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import arrow_spines\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\narrow_spines(ax=ax, color=\"red\")\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import arrow_spines\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\narrow_spines(\n   right=\"totop\",\n   bottom=\"toleft\",\n   left=None, # remove left spine\n   ax=ax,\n   color=\"red\",\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import arrow_spines\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\narrow_spines(\n   ax=ax,\n   color=\"#7b2e8e\", # purple\n   width=3,\n   head_length=15,\n   head_width=10,\n)\n\nax.tick_params(size=0, pad=15) # remove ticks and add padding\n</code></pre> <p>Going further</p>"},{"location":"reference/ax_arrow/","title":"ax_arrow","text":""},{"location":"reference/ax_arrow/#drawarrow.main.ax_arrow","title":"<code>drawarrow.main.ax_arrow(tail_position, head_position, inflection_position=None, double_headed=False, fill_head=True, invert=False, radius=0, width=1, head_width=4, head_length=8, ax=None, shadow_style=None, **kwargs)</code>","text":"<p>Draw an arrow on a Matplotlib axes using a <code>FancyArrowPatch</code>. The coordinate system used is that of a Matplotlib axes (data coordinates).</p> <p>This function is very similar to what <code>fig_arrow()</code> does: only the change of coordinate system and the <code>fig/ax</code> arguments. You can find out more about how coordinate systems work in Matplotlib here.</p> <p>Parameters</p> <ul> <li><code>tail_position</code>: Position of the tail of the arrow</li> <li><code>head_position</code>: Position of the head of the arrow</li> <li><code>inflection_position</code>: Current behavior may be unexpected and will probably change in the future. Optional position of the inflection point</li> <li><code>double_headed</code>: Whether the arrow has two heads or not</li> <li><code>fill_head</code>: Whether the arrowhead is filled or not</li> <li><code>invert</code>: Whether to invert or not the angle of the arrow (only used if <code>radius</code>!=0)</li> <li><code>radius</code>: Rounding radius of the edge. If <code>inflection_position</code> is not None, then it's the rounding radius at the inflection point</li> <li><code>width</code>: Width of the tail of the arrow</li> <li><code>head_width</code>: Head width of the tail of the arrow</li> <li><code>head_length</code>: Head length of the tail of the arrow</li> <li><code>ax</code>: The matplotlib axes to draw the arrow on. If None, uses the current axes</li> <li><code>shadow_style</code>: dictionary with arguments passed to <code>matplotlib.patheffects.SimpleLineShadow</code>:<ul> <li><code>offset</code>: the offset between the arrow and its shadow</li> <li><code>shadow_color</code>: the color of the shadow</li> <li><code>alpha</code>: the opacity of the shadow</li> </ul> </li> <li><code>kwargs</code>: any additional arguments passed to <code>matplotlib.patches.FancyArrowPatch</code></li> </ul> <p>Returns</p> <ul> <li><code>FancyArrowPatch</code>: The arrow patch object</li> </ul> <p>Usage</p> <pre><code>import matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax_arrow([0.1, 0.7], [0.1, 0.5], radius=0.3, color=\"red\", ax=ax)\n\nplt.show()\n</code></pre>"},{"location":"reference/ax_arrow/#examples","title":"Examples","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nax_arrow(\n    head_position=[6, 7],\n    tail_position=[1, 1],\n    radius=0.3,\n    color=\"red\",\n    fill_head=False, # don't fill head\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nax_arrow(\n    head_position=[6, 7],\n    tail_position=[1, 1],\n    radius=0.3,\n    color=\"black\",\n    double_headed=True, # arrow with 2 heads\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nax_arrow(\n    head_position=[6, 7],\n    tail_position=[1, 1],\n    radius=0.9, # bended arrow\n    color=\"blue\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nax_arrow(\n    head_position=[6, 7],\n    tail_position=[1, 1],\n    head_length=20, # head length\n    head_width=10, # head width\n    color=\"#3a46a4\",\n    ax=ax,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nax_arrow(\n    head_position=[6, 7],\n    tail_position=[1, 1],\n    head_length=20, # head length\n    head_width=10, # head width\n    width=3,\n    radius=0.1,\n    shadow_style={\"offset\": (2.5, -4)},\n    color=\"#3aa484\",\n    ax=ax,\n)\n</code></pre> <p>Going further</p>"},{"location":"reference/fig_arrow/","title":"fig_arrow","text":""},{"location":"reference/fig_arrow/#drawarrow.main.fig_arrow","title":"<code>drawarrow.main.fig_arrow(tail_position, head_position, inflection_position=None, double_headed=False, fill_head=True, invert=False, radius=0, width=1, head_width=4, head_length=8, fig=None, shadow_style=None, **kwargs)</code>","text":"<p>Draw an arrow on a Matplotlib figure using a <code>FancyArrowPatch</code>. The coordinate system used is that of a Matplotlib Figure (from 0 to 1).</p> <p>This function is very similar to what <code>ax_arrow()</code> does: only the change of coordinate system and the <code>fig/ax</code> arguments. You can find out more about how coordinate systems work in Matplotlib here.</p> <p>Parameters</p> <ul> <li><code>tail_position</code>: Position of the tail of the arrow</li> <li><code>head_position</code>: Position of the head of the arrow</li> <li><code>inflection_position</code>: Current behavior may be unexpected and will probably change in the future. Optional position of the inflection point</li> <li><code>double_headed</code>: Whether the arrow has two heads or not</li> <li><code>fill_head</code>: Whether the arrowhead is filled or not</li> <li><code>invert</code>: Whether to invert or not the angle of the arrow (only used if <code>radius</code>!=0)</li> <li><code>radius</code>: Rounding radius of the edge. If <code>inflection_position</code> is not None, then it's the rounding radius at the inflection point</li> <li><code>width</code>: Width of the tail of the arrow</li> <li><code>head_width</code>: Head width of the tail of the arrow</li> <li><code>head_length</code>: Head length of the tail of the arrow</li> <li><code>fig</code>: matplotlib figure to draw the arrow on. If it is not supplied, it will use <code>matplotlib.pyplot.gcf()</code>.</li> <li><code>shadow_style</code>: dictionary with arguments passed to <code>matplotlib.patheffects.SimpleLineShadow</code>. The main useful arguments are:<ul> <li><code>offset</code>: the offset between the arrow and its shadow</li> <li><code>shadow_color</code>: the color of the shadow</li> <li><code>alpha</code>: the opacity of the shadow</li> </ul> </li> <li><code>kwargs</code>: any additional arguments passed to <code>matplotlib.patches.FancyArrowPatch</code></li> </ul> <p>Returns</p> <ul> <li><code>FancyArrowPatch</code>: The arrow patch object</li> </ul> <p>Usage</p> <pre><code>import matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow([0.1, 0.7], [0.1, 0.5], radius=0.3, color=\"red\", ax=ax)\n\nplt.show()\n</code></pre>"},{"location":"reference/fig_arrow/#examples","title":"Examples","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nfig_arrow(\n    head_position=[0.6, 0.7],\n    tail_position=[0.2, 0.2],\n    radius=0.3,\n    color=\"red\",\n    fill_head=False, # don't fill head\n    fig=fig,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nfig_arrow(\n    head_position=[0.6, 0.7],\n    tail_position=[0.2, 0.2],\n    radius=0.3,\n    color=\"black\",\n    double_headed=True, # arrow with 2 heads\n    fig=fig,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nfig_arrow(\n    head_position=[0.6, 0.7],\n    tail_position=[0.2, 0.2],\n    radius=0.9, # bended arrow\n    color=\"blue\",\n    fig=fig,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nfig_arrow(\n    head_position=[0.6, 0.7],\n    tail_position=[0.2, 0.2],\n    head_length=20, # head length\n    head_width=10, # head width\n    color=\"#3a46a4\",\n    fig=fig,\n)\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter([1, 2, 3, 8, 6, 10], [2, 5, 3, 9, 2, 10])\n\nfig_arrow(\n    head_position=[0.6, 0.7],\n    tail_position=[0.2, 0.2],\n    head_length=20, # head length\n    head_width=10, # head width\n    width=3,\n    radius=0.1,\n    shadow_style={\"offset\": (2.5, -4)},\n    color=\"#3aa484\",\n    fig=fig,\n)\n</code></pre> <p>Going further</p>"}]}